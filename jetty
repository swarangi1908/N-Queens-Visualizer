package com.example.myapp;

import javax.ws.rs.*;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.atomic.AtomicInteger;

@Path("/messages")
public class MyResource {
    private static ConcurrentHashMap<Integer, String> messages = new ConcurrentHashMap<>();
    private static AtomicInteger idCounter = new AtomicInteger();

    @GET
    @Produces(MediaType.TEXT_PLAIN)
    public String getAllMessages() {
        return messages.toString();
    }

    @GET
    @Path("/{id}")
    @Produces(MediaType.TEXT_PLAIN)
    public Response getMessage(@PathParam("id") int id) {
        String message = messages.get(id);
        if (message == null) {
            return Response.status(Response.Status.NOT_FOUND).entity("Message not found").build();
        }
        return Response.ok(message, MediaType.TEXT_PLAIN).build();
    }

    @POST
    @Consumes(MediaType.TEXT_PLAIN)
    public Response createMessage(String message) {
        int id = idCounter.incrementAndGet();
        messages.put(id, message);
        return Response.status(Response.Status.CREATED).entity("Message created with ID: " + id).build();
    }

    @PUT
    @Path("/{id}")
    @Consumes(MediaType.TEXT_PLAIN)
    public Response updateMessage(@PathParam("id") int id, String message) {
        if (messages.replace(id, message) == null) {
            return Response.status(Response.Status.NOT_FOUND).entity("Message not found").build();
        }
        return Response.ok("Message updated").build();
    }

    @DELETE
    @Path("/{id}")
    public Response deleteMessage(@PathParam("id") int id) {
        if (messages.remove(id) == null) {
            return Response.status(Response.Status.NOT_FOUND).entity("Message not found").build();
        }
        return Response.ok("Message deleted").build();
    }
}
